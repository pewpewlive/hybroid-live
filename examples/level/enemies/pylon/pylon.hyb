env Pylon as Level

use Pewpew
use PylonConstants
use ShipEntity
use ShardEntity

enum AttackState {
    NOTHING,
    BARRAGE
}

const BARRAGE_DURATION = 50
const BARRAGE_BULLET_FREQUENCY = 15
const PYLON_SIGHT_RADIUS = 500f
const DEATH_DURATION = 40f
const HP_MAX = 40
const HOVER_HEIGHT = 25f
const PYLON_COLOR = 0xaa00faff
const PYLON_SCALE = 1.5f

pub entity Pylon {
    AttackState state = AttackState.NOTHING
    entity topPrism
    fixed time
    number attackTime = Fmath:RandomNumber(40, 60)
    fixed prismRotation = 1d
    fixed lookToAngle 
    bool forceIdle
    fixed x, y
    number hp = HP_MAX
    bool isDying

    fixed collisionCooldown
    number reactionTime

    spawn(fixed x, y) {
        self.x, self.y = x, y

        SetEntityMesh(self, PylonMesh, 0)
        SetEntityMeshColor(self, PYLON_COLOR)
        SetEntityMeshScale(self, PYLON_SCALE)
        SetEntityRadius(self, 20f*PYLON_SCALE)
        SetEntityTag(self, Globals:BULLET_COLLIDABLE_TAG)

        topPrism = NewEntity(x,y)
        SetEntityMesh(topPrism, PylonMesh, 1)
        SetEntityMeshScale(self, PYLON_SCALE)
        SetEntityMeshColor(topPrism, PYLON_COLOR)
        SetEntityMeshZ(topPrism, 10f)
    }

    destroy() {
        DestroyEntity(topPrism)
        DestroyEntity(self)
        CreateExplosion(x, y, PYLON_COLOR, 1.5f, 50)
        CreateExplosion(x, y, PYLON_COLOR, 1f, 30)
        PlaySound(PylonSound, 1, x, y)
        if IsEntityAlive(ShipEntity:SHIP.id) {
            let px, py = GetEntityPosition(ShipEntity:SHIP.id)
            let dist = (px - x) ^ 2f + (py - y) ^ 2f
            ShipEntity:SHIP.cam.Shake(FmathHelpers:Clamp(50f * (1f - dist / (150f ^ 2f)), 10f, 50f))
        }
        spawn Shockwave:Shockwave(x, y, struct{radius = 30f, speed = 10f, power = 60f, duration = 60, count = 32})
    }

    Update() {
        time += 1f
        collisionCooldown -= 1f
        reactionTime -= 1
        if reactionTime >= 0 {
            SetEntityMeshColor(self, 0xfa4000ff)
            SetEntityMeshColor(topPrism, 0xfa4000ff)
        } else {
            SetEntityMeshColor(self, PYLON_COLOR)
            SetEntityMeshColor(topPrism, PYLON_COLOR)
        }

        if IsEntityAlive(SHIP.id) {
            let px, py = GetEntityPosition(SHIP.id)
            let dx, dy = px - x, py - y
            if dx * dx + dy * dy <= PYLON_SIGHT_RADIUS ^ 2f {
                forceIdle = false
                lookToAngle = Fmath:Atan2(dy, dx)
            } else {
                forceIdle = true
            }
        } else {
            forceIdle = true
        }
    

        match state {
        AttackState.NOTHING => {
            attackTime -= 1
            if attackTime <= 0 and !forceIdle {
                state = AttackState.BARRAGE
                attackTime = 0
            }
        }
        AttackState.BARRAGE => {
            attackTime += 1

            if attackTime >= BARRAGE_DURATION or !IsEntityAlive(SHIP.id) {
                state = AttackState.NOTHING
                attackTime = 50
                break
            }

            if attackTime % BARRAGE_BULLET_FREQUENCY == 0 {
                repeat from -1f to 1f with i {
                    if i == 0f continue
                    let offset = 12d * i
                    let offsetY, offsetX = Fmath:Sincos(offset)
                    spawn Shard(x + offsetX * 10f, y + offsetY * 10f, lookToAngle + offset, 9f, 330)
                }

                prismRotation += 7d
            }
        }
        }
        
        prismRotation = FmathHelpers:Lerp(prismRotation, 1d, 0.2f)
        Rotate()
        let sin, _ = Fmath:Sincos(time / 7f)
        SetEntityMeshZ(topPrism, Fmath:ToFixed(HEIGHT) + HOVER_HEIGHT + HOVER_HEIGHT * sin)
    }

    PlayerCollision(number _, entity shipId) {
        if isDying return 
        if collisionCooldown >= 0f {
            return 
        }
        reactionTime = 2
        collisionCooldown = 5f
        PlaySound(PylonSound, Fmath:RandomNumber(2,4), x, y)
        DamageShip(shipId, 1)
    }

    WeaponCollision(number _, WeaponType weaponType) -> bool {
        if isDying return false

        match weaponType {
            WeaponType.Bullet => {
                hp -= 1
                reactionTime = 2
                PlaySound(PylonSound, Fmath:RandomNumber(2,4), x, y)
                if hp <= 0 {
                    InitiateDeath()
                }
                return true
            }
            WeaponType.AtomizeExplosion => {
                destroy self()
            }
        }

        return false
    }

    fn InitiateDeath() {
        isDying = true
        state = AttackState.NOTHING
        time = 0f
        PlaySound(PylonSound, 0, x, y)
        SetEntityPositionInterpolation(self, false)
        SetEntityPositionInterpolation(topPrism, false)
        SetEntityUpdateCallback(self, DeathUpdateCallback)
    }

    fn Rotate() {
        AddRotationToEntityMesh(topPrism, prismRotation, 0f, 0f, 0.2f)
        AddRotationToEntityMesh(self, -prismRotation, 0f, 0f, 1f)
    }

    fn DeathUpdateCallback(entity _) {
        time += 1f

        prismRotation = FmathHelpers:Remap(1d, 32d, 0f, DEATH_DURATION, time)
        Rotate()
        let ry, rx = Fmath:Sincos(Fmath:RandomFixed(0d, 360d))
        let length = Fmath:RandomFixed(2f, 4f)

        SetEntityPosition(self, x+rx*length, y+ry*length)
        SetEntityPosition(topPrism, x+rx*length, y+ry*length)
        
        SetEntityMeshColor(self, Fmath:RandomNumber(0x0, 0xffffff) * 256 + 0xff)
        SetEntityMeshColor(topPrism, Fmath:RandomNumber(0x0, 0xffffff) * 256 + 0xff)

        if time >= DEATH_DURATION {
           destroy self()
        }
    }
}