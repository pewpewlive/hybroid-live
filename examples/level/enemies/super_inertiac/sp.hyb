env SuperInertiacEntity as Level

use Pewpew
use FmathHelpers
use ShipEntity

enum State {
  FOLLOWING_PLAYER,
  PREPARING_DASH,
  PREPARING_LASER,
  DEAD
}

const RING_AMOUNT = 3f
const RADIUS = 25f
const PREDICTION_SPEED = 0.63f
const DASH_PREPARATION_TIME = 35
const LASER_PREPARATION_TIME = 25
const SPREAD_MAX = 35d
const COLLISION_COOLDOWN_MAX = 10
const HIT_COOLDOWN_MAX = 4
const COOLDOWN_MAX = 90
const LASER_COLOR = 0x00ffffff
const HP_MAX = 70

pub entity SuperInertiac {
  fixed x, y = 0f, 0f
  fixed velX, velY = 0f, 0f
  fixed lvx, lvy
  
  number health = HP_MAX

  number cooldown = COOLDOWN_MAX
  number collisionCooldown
  number hitCooldown
  number preparationTimer

  State state = State.FOLLOWING_PLAYER

  number frameOffset = 0
  number maxFrames = 60
  list<number> frames

  list<entity> rings
  list<struct{fixed x, y}> axes

  entity predictionLine
  fixed pdX, pdY

  list<entity> laserIndicators
  fixed currentSpread = 0d
  fixed lookToPlayerAngle

  spawn(fixed x, fixed y) {
    SpawnEntity(self, 60)
    SetEntityPositionInterpolation(self, true)

    SetEntityPosition(self, x, y)

    //SetEntityColor(self, 0x00ffffff)
    SetEntityMesh(self, SPAnim, 0)
    SetEntityRadius(self, RADIUS)
    
    predictionLine = NewEntity(x, y)
    SetEntityMesh(predictionLine, SPPredLineMesh, 1)
    SetEntityPositionInterpolation(predictionLine, true)

    repeat 3 {
      let laserIndicator = NewEntity(x, y)
      Table:Insert(laserIndicators, laserIndicator)
      SetEntityPositionInterpolation(laserIndicator, true)
    }

    Table:Insert(frames, 0)
    repeat from RING_AMOUNT to 1f by -1f with i {
      entity ring = NewEntity(x, y)
      Table:Insert(rings, ring)
      fixed t = InvLerp(4f, 1f, i)
      SetEntityMeshScale(ring, t)
      SetEntityMesh(ring, SPAnim, 0)
      SetEntityPositionInterpolation(ring, true)
      //SetEntityColor(ring, ColorHelpers:MakeColor(Fmath:ToNum(100 * t), Fmath:ToNum(255 * t), 255, 200))
      Table:Insert(axes, struct{
        x = Fmath:RandomFixed(-1f, 1f),
        y = Fmath:RandomFixed(-1f, 1f),
      })
      Table:Insert(frames, Fmath:RandomNumber(0, 59))
    }
  }

  destroy() {
    state = State.DEAD
    PlaySound(SPSound, 0, x, y)
    SetEntityWallCollision(self, false, fn(entity _, fixed _, _) {})
    ExplodeEntity(self, 20)
    CreateExplosion(x, y, 0x1144aaff, 1.6f, 50)
    CreateExplosion(x, y, 0x330077ff, 1.6f, 50)
    CreateExplosion(x, y, 0x00aaddff, 1.6f, 50)

    for _, ring in rings {
      ExplodeEntity(ring, 20)
    }
    for _, laser in laserIndicators {
      DestroyEntity(laser)
    }
    ExplodeEntity(predictionLine, 0)
  }

  WallCollision(fixed normalX, fixed normalY) {
    if IsDead() 
      return 
    
    if !IsEntityAlive(SHIP.id) 
      velX, velY *= 0.7f, 0.7f

    velX, velY = Reflect(velX, velY, normalX, normalY)
  }
  
  PlayerCollision(number _, entity shipId) {
    if IsEntityAlive(shipId) and CanCollide() {
      velX, velY = -velX * 1.5f, -velY * 1.5f
      DamageShip(shipId, 1)

      health = MathHelpers:Clamp(health + 10, 0, 70)

      CreateExplosion(x, y, 0x1144aaff, 0.8f, 10)
      CreateExplosion(x, y, 0x330077ff, 0.8f, 10)
      CreateExplosion(x, y, 0x00aaddff, 0.8f, 10)
    }

    collisionCooldown = COLLISION_COOLDOWN_MAX
  }

  WeaponCollision(number _, WeaponType weaponType) -> bool {
    if IsDead() 
      return false

    if weaponType == WeaponType.Bullet {
      health -= 1
      if health > 0 {
        Bounce(SHIP.id, 1.1f)

        hitCooldown = HIT_COOLDOWN_MAX
        PlaySound(SPSound, MathHelpers:Remap(1, 10, 0, HP_MAX, health)\1, x, y)
      }

      CreateExplosion(x, y, 0x1144aaff, 0.8f, 10)
      CreateExplosion(x, y, 0x330077ff, 0.8f, 10)
      CreateExplosion(x, y, 0x00aaddff, 0.8f, 10)
    }
    
    if health <= 0
      destroy self()
  
    return true
  }

  Update() {
    if IsDead()
      return
    
    Move()
    UpdatePredicitonLine()
    UpdateIndicators()
    UpdateVisuals()

    if cooldown > 0 {
      cooldown -= 1
    } else if Is(State.FOLLOWING_PLAYER) and IsEntityAlive(SHIP.id) {
      match Fmath:RandomNumber(0, 1) {
        0 => {
          state = State.PREPARING_DASH
          preparationTimer = DASH_PREPARATION_TIME
        }
        1 => {
          state = State.PREPARING_LASER
          preparationTimer = LASER_PREPARATION_TIME
        }
      }
    }

    if preparationTimer > 0 {
      preparationTimer -= 1
      match state {
        State.PREPARING_LASER => {
          if preparationTimer == LASER_PREPARATION_TIME-1 {
            for _, v in laserIndicators {
              SetEntityMesh(v, SPPredLineMesh, 2)
            }
          }
          if preparationTimer > 0
            break
          
          if IsEntityAlive(ShipEntity:SHIP.id) {
            let px, py = GetEntityPosition(ShipEntity:SHIP.id)
            let dist = (px - x) ^ 2f + (py - y) ^ 2f
            ShipEntity:SHIP.cam.Shake(FmathHelpers:Clamp(30f * (1f - dist / 100f), 10f, 30f))
          }
          state = State.FOLLOWING_PLAYER
          cooldown = COOLDOWN_MAX
          for i, v in laserIndicators {
            SetEntityMesh(v, SPPredLineMesh, 1)
            spawn Laser:Laser(x, y, lookToPlayerAngle+currentSpread*Fmath:ToFixed(i-2), LASER_COLOR, 1f)
          }
          currentSpread = 0d
        }
        State.PREPARING_DASH => {
          SetEntityMesh(predictionLine, SPPredLineMesh, 0)
          preparationTimer -= 1

          if preparationTimer > 0
            break
            
          state = State.FOLLOWING_PLAYER
          SetEntityMesh(predictionLine, SPPredLineMesh, 1)
          cooldown = COOLDOWN_MAX
          Dash()
        }
      }
    }
    
    if !CanCollide() 
      collisionCooldown -= 1

    x, y = GetEntityPosition(self)
    let entities = GetEntitiesInRadius(x, y, RADIUS*1.8f)
    for _, v in entities {
      if v == self {
        continue
      }
      if let converted = v is SuperInertiac and IsEntityAlive(v) {
        if converted.IsDead() {
          continue
        }
        Bounce(converted, 3f)
        converted.Bounce(self, 3f)
        continue
      }
    }
  }

  fn CanCollide() -> bool => collisionCooldown <= 0
  fn IsHit() -> bool => hitCooldown > 0
  fn IsDead() -> bool => state == State.DEAD
  fn Is(State state) -> bool => self.state == state

  fn Move() {
    if Is(State.FOLLOWING_PLAYER) and IsEntityAlive(SHIP.id) {
      fixed sX, sY = GetEntityPosition(SHIP.id) 
      fixed dX, dY = Normalize(sX - x, sY - y)

      velX += dX * 1.3f
      velY += dY  * 1.3f
      velX, velY *= 0.95f, 0.95f
    } else if !Is(State.FOLLOWING_PLAYER) or !IsEntityAlive(SHIP.id)  {
      velX, velY *= 0.80f, 0.80f
    }

    x, y += velX, velY
    SetEntityPosition(self, x, y)
    for i in rings {
      fixed rx, ry = GetEntityPosition(rings[i])
      //Print(fixedI)
      fixed t = Lerp(0.2f, 1f, InvLerp(1f, 3f, Fmath:ToFixed(i)))
      if t < 0.5f {
        //fixedT = Fmath:Sqrt(fixedT)
      } else {
        t *= t
      }
      SetEntityPosition(rings[i], Lerp(rx, x, t), Lerp(ry, y, t))
    }
  }

  fn Dash() {
    if IsDead() or !IsEntityAlive(SHIP.id) 
      return 

    velX = pdX * 40f
    velY = pdY * 40f

    SetEntityMesh(predictionLine, SPPredLineMesh, 1)
    CreateExplosion(x, y, 0x1144aaff, 1f, 20)
    CreateExplosion(x, y, 0x330099ff, 1f, 20)
    CreateExplosion(x, y, 0x0044aaff, 1f, 20)
  }

  fn UpdateIndicators() {
    for i, v in laserIndicators {
      SetEntityPosition(v, x, y)
      SetEntityMeshAngle(v, lookToPlayerAngle+currentSpread*Fmath:ToFixed(i-2), 0f, 0f, 1f)
      let lerpPower = 0.9f
      if Is(State.PREPARING_LASER) {
        lerpPower = 0.01f
      }
      if IsEntityAlive(SHIP.id) {
        let px, py = GetEntityPosition(SHIP.id)
        lvx = Lerp(lvx, px-x, lerpPower)
        lvy = Lerp(lvy, py-y, lerpPower)
        lookToPlayerAngle = Fmath:Atan2(lvy, lvx)
      }
    }
    if Is(State.PREPARING_LASER) {
      currentSpread = FmathHelpers:Lerp(currentSpread, SPREAD_MAX, 0.2f)
    }
  }

  fn Bounce(SuperInertiac e, fixed intensity) {
    if IsEntityAlive(e) and !IsEntityBeingDestroyed(e) {
      fixed sX, sY = GetEntityPosition(e)
      fixed dX, dY = Normalize(x - sX, y - sY)
      velX, velY += dX * intensity, dY * intensity
    }
  }

  fn UpdateVisuals() {
    if IsHit() {
      frameOffset = 60
      hitCooldown -= 1
      if hitCooldown <= 0 {
        frameOffset = 0
      }
    }

    fixed magnitude = Length(velX, velY) * 0.02f

    AddRotationToEntityMesh(self, magnitude*magnitude + 0.1f, Fmath:RandomFixed(0f, 1f), Fmath:RandomFixed(0f, 1f), 0f)
    
    if !IsDead() {
      frames[1] += 1 
      frames[1] = MathHelpers:Wrap(frames[1], 0, 59)
    }
    
    SetEntityFlippingMeshes(self, SPAnim, frames[1] % maxFrames + frameOffset, MathHelpers:Wrap(frames[1] % maxFrames + 1 + frameOffset, frameOffset, 59+frameOffset))
    for i in rings {
      SetEntityFlippingMeshes(rings[i], SPAnim, frames[i+1] % maxFrames + frameOffset, MathHelpers:Wrap(frames[i+1] % maxFrames + 1 + frameOffset, frameOffset, 59+frameOffset))
      AddRotationToEntityMesh(rings[i], magnitude*magnitude + 0.1f, axes[i].x, axes[i].y, 0f)
      if !IsDead() {
        frames[i+1] += 1
        frames[1] = MathHelpers:Wrap(frames[1], 0, 59)
      }
    }
  }

  fn UpdatePredicitonLine() {
    if IsDead() or !IsEntityAlive(SHIP.id) 
      return 

    fixed sX, sY = GetEntityPosition(SHIP.id)
    fixed dX, dY = sX - x, sY - y
    fixed sMovAngle, sMovDist, _, _ = GetPlayerInputs(0) 

    fixed sMovDY, sMovDX = Fmath:Sincos(sMovAngle)
    fixed predMovX, predMovY = sMovDX * sMovDist * 100f, sMovDY * sMovDist * 100f
    predMovX, predMovY = -predMovX, -predMovY

    fixed pDX, pDY = Normalize((dX - predMovX - velX), (dY - predMovY - velY)) 
    pdX = Lerp(pdX, pDX, PREDICTION_SPEED)
    pdY = Lerp(pdY, pDY, PREDICTION_SPEED)

    SetEntityMeshAngle(predictionLine, Fmath:Atan2(pdY, pdX), 0f, 0f, 1f)
    SetEntityPosition(predictionLine, x, y)
  }
}