env WormholeEntity as Level

use Pewpew
use ShipEntity
use ScoreUtils

pub entity WormholeDeath {
    fixed radius, power
    number lifeTime = 5

    spawn(fixed x, y, radius, power) {
        self.radius = radius
        self.power = power
    }

    Update() {
        lifeTime -= 1
        if lifeTime <= 0 {
            destroy self()
        }
    }

    destroy() {
        DestroyEntity(self)
    }
}

enum AttackState {
    NOTHING,
    CHARADE,
    BURST,
    CHARADE_BURST
}

const MOVE_SPEED = 1f
const HP_MAX = 80

const CHARADE_PREPARATION_TIME = 120
const CHARADE_DURATION = 300
const CHARADE_BULLET_FREQUENCY = 5

const BURST_BULLET_FREQUENCY = 12
const BURST_BULLET_AMOUNT = 8
const BURST_DURATION = 300
const BURST_PREPARATION_TIME = 90

pub entity Wormhole {
    AttackState state = AttackState.NOTHING
    fixed mx, my
    fixed radius
    fixed currentPullRadius
    fixed pullRadius
    number hp = HP_MAX

    number preparationTime = 20

    // Attacks-related
    fixed shootAngle
    fixed shootAngleStep
    number attackTime

    number burstTime
    number burstBulletFrequency
    number burstFrequency
    number burstBulletAmount = BURST_BULLET_AMOUNT

    spawn(fixed x, y, radius) {
        SetEntityRadius(self, radius)
        self.radius = radius
        self.pullRadius = radius*4f
        self.currentPullRadius = self.pullRadius
        my, mx = Fmath:Sincos(Fmath:RandomFixed(0f, Fmath:Tau()))
    }

    destroy() {
        PlayAmbientSound(WormholeSound, 1)
        let ex, ey = GetEntityPosition(self)
        spawn WormholeDeath(ex, ey, pullRadius, 150f)
        DestroyEntity(self)

        IncreaseScore(ex, ey, LevelScore.Score300, PointoniumScore.Score256)
    }

    Update() {
        if !IsEntityAlive(self) {
            return
        }

        currentPullRadius = FmathHelpers:Lerp(currentPullRadius, pullRadius, 0.6f)
        let ex, ey = GetEntityPosition(self)
        ex, ey += mx*MOVE_SPEED, my*MOVE_SPEED
        SetEntityPosition(self, ex, ey)

        repeat 2 {
            let px, py = FmathHelpers:Normalize(Fmath:RandomFixed(-1f, 1f), Fmath:RandomFixed(-1f, 1f))
            px, py *= radius, radius
            let pdx, pdy = FmathHelpers:Normalize(Fmath:RandomFixed(-1f, 1f), Fmath:RandomFixed(-1f, 1f))
            let rad = Fmath:RandomFixed(0f, radius)
            pdx, pdy *= rad, rad
            let col = ColorHelpers:LerpColors(Grid:gridColor, Grid:activeGridColor, Fmath:RandomFixed(0f, 1f))
            Pewpew:AddParticle(ex+px, ey+py, 0f, pdx, pdy, 0f, col, Fmath:RandomNumber(10, 30))
        }
        
        if IsEntityAlive(SHIP.id) {
            let px, py = GetEntityPosition(SHIP.id)
            let dist = FmathHelpers:Length(px-ex, py-ey)
            if dist < radius*3f {
                let resistance = FmathHelpers:Remap(0f, 8f, radius*3f, radius, dist)
                let vx, vy = FmathHelpers:Normalize(px-ex, py-ey)
                EntityMove(SHIP.id, vx*resistance, vy*resistance)
            }
        }
        
        match state {
            AttackState.NOTHING => {
                preparationTime -= 1
                if preparationTime > 0 
                    break
                shootAngleStep = Fmath:RandomFixed(10d, 40d)
                match Fmath:RandomNumber(0, 2) {
                0 => {
                    state = AttackState.CHARADE
                    if IsEntityAlive(ShipEntity:SHIP.id) {
                        let px, py = GetEntityPosition(ShipEntity:SHIP.id)
                        shootAngle = Fmath:Atan2(py-ey, px-ex)
                    }
                }
                1 => {
                    state = AttackState.BURST
                    burstBulletFrequency = Fmath:RandomNumber(BURST_BULLET_FREQUENCY-1, BURST_BULLET_FREQUENCY+1)
                    burstFrequency = MathHelpers:Remap(50, 30, BURST_BULLET_FREQUENCY-1, BURST_BULLET_FREQUENCY+1, burstBulletFrequency)
                }
                2 => {
                    if IsEntityAlive(ShipEntity:SHIP.id) {
                        let px, py = GetEntityPosition(ShipEntity:SHIP.id)
                        shootAngle = Fmath:Atan2(py-ey, px-ex)
                    }
                    if burstBulletFrequency == 0 {
                        burstBulletFrequency = Fmath:RandomNumber(BURST_BULLET_FREQUENCY-1, BURST_BULLET_FREQUENCY+1)
                        burstFrequency = MathHelpers:Remap(50, 30, BURST_BULLET_FREQUENCY-1, BURST_BULLET_FREQUENCY+1, burstBulletFrequency)
                    }
                    state = AttackState.CHARADE_BURST
                }
                }
            }
            AttackState.CHARADE => {
                attackTime += 1
                if attackTime % CHARADE_BULLET_FREQUENCY == 0 {
                    let bullet = spawn BulletEntity:Bullet(ex, ey, 3f, shootAngle, 1f, 0xaaffffff, 1000)
                    bullet.bs.bounceWallCount = 1
                    shootAngle += shootAngleStep
                }
                if attackTime >= CHARADE_DURATION {
                    state = AttackState.NOTHING
                    preparationTime = CHARADE_PREPARATION_TIME
                    attackTime = 0
                }
            }
            AttackState.BURST => {
                attackTime += 1
                burstTime += 1
                if attackTime >= BURST_DURATION {
                    state = AttackState.NOTHING
                    preparationTime = BURST_PREPARATION_TIME
                    attackTime = 0
                    burstTime = 0
                    break
                }
                if burstTime > 0 and attackTime % burstBulletFrequency == 0 {
                    let increment = 360d/Fmath:ToFixed(burstBulletAmount)
                    repeat burstBulletAmount {
                        let bullet = spawn BulletEntity:Bullet(ex, ey, 5f, shootAngle, 1f, 0xaaffffff, 1000)
                        bullet.bs.bounceWallCount = 1
                        shootAngle += increment
                    }
                }
                if burstTime > burstBulletFrequency*3 {
                    burstTime = -burstFrequency
                    shootAngle += shootAngleStep
                }
            }
            AttackState.CHARADE_BURST => {
                attackTime += 1
                if attackTime >= (BURST_DURATION+CHARADE_DURATION)/2 {
                    state = AttackState.NOTHING
                    attackTime = 0
                    preparationTime = (BURST_PREPARATION_TIME+CHARADE_PREPARATION_TIME)/2
                    break
                }
                if attackTime % burstFrequency-CHARADE_BULLET_FREQUENCY == 0 {
                    let deg = 360d/Fmath:ToFixed(burstBulletAmount)
                    let inc = deg/Fmath:ToFixed(burstBulletAmount\2)
                    let bullet = spawn BulletEntity:Bullet(ex, ey, 5f, shootAngle, 1f, 0xaaffffff, 1000)
                    bullet.bs.bounceWallCount = 1
                    repeat burstBulletAmount\3 with i {
                        let bullet = spawn BulletEntity:Bullet(ex, ey, 5f, shootAngle-inc*Fmath:ToFixed(i), 1f, 0xaaffffff, 1000)
                        bullet.bs.bounceWallCount = 1
                        let bullet2 = spawn BulletEntity:Bullet(ex, ey, 5f, shootAngle+inc*Fmath:ToFixed(i), 1f, 0xaaffffff, 1000)
                        bullet2.bs.bounceWallCount = 1
                    }
                    shootAngle += deg+shootAngleStep
                }
            }
        }
    }

    WallCollision(fixed wallNormalX, fixed wallNormalY) {
        let wAngle = Fmath:Atan2(wallNormalY, wallNormalX)
        let mAngle = Fmath:Atan2(-my, -mx)
        my, mx = Fmath:Sincos(mAngle+wAngle-mAngle)
    }

    WeaponCollision(number _, WeaponType weaponType) -> bool {
        match weaponType {
        WeaponType.Bullet => {
            hp -= 1
            currentPullRadius *= 0.3f
            let ex, ey = GetEntityPosition(self)
            PlaySound(WormholeSound, 0, ex, ey)
            IncreasePlayerScore(0, 2)
            if hp < 0 {
                destroy self()
                return true
            }
            return true
        }
        }
        return false
    }
}

// const HIT_COOLDOWN_MAX = 6f
// const HP_MAX = 20

// entity Sphere {
//     entity worm
//     fixed hitCooldown
//     number hp = HP_MAX
//     fixed randomAngle 
//     number color

//     spawn(fixed x, y, entity worm, fixed radius) {
//         self.worm = worm
//         SetEntityRadius(self, radius*2f)
//         fixed a = FmathHelpers:Remap(0f, 53f, 0f, 26f, radius)
//         fixed a2 = FmathHelpers:InvLerp(0f, 105f, a)
//         SetEntityMeshScale(self, a2)
//         SetEntityTag(self, Grid:ENTITY_TAG)
//         randomAngle = Fmath:RandomFixed(0f, 8d)
//         SetEntityMeshZ(self, a*5f+50f)
//         SetEntityMesh(self, WormholeMesh, 1)
//     }

//     destroy() {
//         DestroyEntity(self)
//     }

//     WeaponCollision(number _, WeaponType weaponType) -> bool {
//         match weaponType {
//         WeaponType.Bullet => {
//             hp -= 1
//             if hp < 0 {
//                 destroy self()
//                 return true
//             }
//             hitCooldown = HIT_COOLDOWN_MAX
//             return true
//         }
//         }
//         return false
//     }

//     Update() {
//         hitCooldown = FmathHelpers:Clamp(hitCooldown-1f, 0f, HIT_COOLDOWN_MAX)
//         color = ColorHelpers:LerpColors(0xffffffff, 0x00000000, FmathHelpers:InvLerp(HIT_COOLDOWN_MAX, 0f, hitCooldown))
//         Pewpew:SetEntityMeshColor(self, color)
//         let wx, wy = GetEntityPosition(worm)
//         SetEntityPosition(self, wx, wy)
//         if !IsEntityBeingDestroyed(self) {
//             AddRotationToEntityMesh(self, randomAngle, 1f, -1f, 0.5f)
//         }
//     }
// }