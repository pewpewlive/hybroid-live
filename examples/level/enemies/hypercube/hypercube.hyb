env HypercubeEntity as Level

use Pewpew
use ShipEntity

const INITIAL_RADIUS = 22f
const MAX_SPEED = 2f
pub const FAST_ENOUGH = 8f

pub entity Hypercube {
    number frames
    fixed mx, my
    fixed scale
    fixed radius
    fixed colorT

    fixed xAxis, yAxis, zAxis
    fixed growth = 0.008f

    let spawningTime = 30
    number scoreToGive = 200

    spawn(fixed x, y) {
        self.scale = 1f
        SetEntityMesh(self, HypercubeMesh, 0)
        SetEntityPositionInterpolation(self, true)
        SkipEntityMeshAttributesInterpolation(self)
        SpawnEntity(self, spawningTime)
        SetEntityRadius(self, INITIAL_RADIUS)

        xAxis = Fmath:RandomFixed(0.5f, 1f)
        yAxis = Fmath:RandomFixed(-0.5f, 1f)
        zAxis = Fmath:RandomFixed(-1f, 1f)
        if zAxis < 0.5f and zAxis > -0.5f {
            zAxis = 0.5f
        }

        my, mx = Fmath:Sincos(Fmath:RandomFixed(0d, 360d))
    }

    destroy(bool duplicating) {
        let x, y = GetEntityPosition(self)
        let color = ColorHelpers:LerpColors(0xff00ffff, 0xafffffff, colorT)
        CreateExplosion(x, y, color, scale, 30)
        CreateExplosion(x, y, color, scale * 0.5f, 30)
        ExplodeEntity(self, 30)
        SetEntityWallCollision(self, false, fn(entity _, fixed _, _) {})
        PlaySound(HypercubeSound, 1, x, y)

        let score = match scoreToGive {
            200 => ScoreUtils:LevelScore.Score200
            100 => ScoreUtils:LevelScore.Score100
            else => ScoreUtils:LevelScore.Score50
        }
        if !duplicating {
            ScoreUtils:IncreaseScore(x, y, score, ScoreUtils:PointoniumScore.Score64)
        }
    }

    Update() {
        spawningTime -= 1
        scale += growth
        if scale < 1f {
            scale = 1f
        }

        AddRotationToEntityMesh(self, 5d, xAxis, yAxis, zAxis)
        SetEntityMeshScale(self, scale)
        SetEntityRadius(self, INITIAL_RADIUS * scale)
        
        if !IsEntityBeingDestroyed(self) and spawningTime <= 0 {
            SetEntityFlippingMeshes(self, HypercubeMesh, frames, frames + 1)
            frames = (frames + 2) % 120

            if scale > 3.5f {
                let x, y = GetEntityPosition(self)
                destroy self(true)
                let angle = Fmath:RandomFixed(0d, 360d)
                let hc = spawn Hypercube(x, y)
                hc.my, hc.mx = Fmath:Sincos(angle)
                hc.growth = growth / 2f
                hc.scoreToGive = scoreToGive \ 2
                let hc2 = spawn Hypercube(x, y)
                hc2.my, hc2.mx = Fmath:Sincos(angle+180d)
                hc2.growth = growth / 2f
                hc2.scoreToGive = scoreToGive \ 2
                return
            }
        } else {
            SetEntityMesh(self, HypercubeMesh, frames)
        }

        UpdateMovement()
    }

    fn UpdateMovement() {
        radius = INITIAL_RADIUS * scale
        SetEntityRadius(self, radius)
        colorT = FmathHelpers:Lerp(colorT, FmathHelpers:Clamp(Sum()/FAST_ENOUGH, 0.1f, 1.1f) - 0.1f, 0.3f)
        SetEntityMeshColor(self, ColorHelpers:LerpColors(0xff00ffff, 0xafffffff, colorT))

        let x, y = GetEntityPosition(self)
        mx, my = FmathHelpers:Lerp(mx, 0f, 0.002f), FmathHelpers:Lerp(my, 0f, 0.002f)

        x, y += mx * MAX_SPEED, my * MAX_SPEED
        let entities = GetEntitiesInRadius(x, y, radius)
        for _, v in entities {
            if v == self or v isnt Hypercube
                continue
            if Sum() > FAST_ENOUGH * 0.7f continue
            
            let ex, ey = GetEntityPosition(v)
            mx, my = FmathHelpers:Normalize(x - ex, y - ey)
            mx, my *= 1.4f, 1.4f
        }
        SetEntityPosition(self, x, y)
    }

    fn Sum() -> fixed {
        return Fmath:AbsFixed(mx) + Fmath:AbsFixed(my)
    }

    WallCollision(fixed wallNormalX, wallNormalY) {
        if IsEntityBeingDestroyed(self) return
        if Sum() >= FAST_ENOUGH {
            destroy self(false)
            return
        }
        let wAngle = Fmath:Atan2(wallNormalY, wallNormalX)
        let mAngle = Fmath:Atan2(-my, -mx)
        my, mx = Fmath:Sincos(mAngle + wAngle - mAngle)
    }

    PlayerCollision(number _, entity shipId) {
        DamageShip(shipId, 1)
        destroy self(false)
    }

    WeaponCollision(number _, WeaponType weaponType) -> bool {
        if IsEntityBeingDestroyed(self) return false
        match weaponType {
            WeaponType.Bullet => {
                scale *= FmathHelpers:Remap(0.97f, 1f, 0.01f, 0f, growth)
                let x, y = GetEntityPosition(self)
                PlaySound(HypercubeSound, 0, x, y)
                if IsEntityAlive(SHIP.id) {
                    let px, py = GetEntityPosition(SHIP.id)
                    let dx, dy = FmathHelpers:Normalize(px - x, py - y)
                    mx, my += dx * 0.7f, dy * 0.7f
                }
                return true
            }
            WeaponType.AtomizeExplosion => {
                destroy self(false)
            }
            WeaponType.PlasmaField => {
                destroy self(false)
            }
        }
        return true
    }
}