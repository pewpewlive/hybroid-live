env VithenEntity as Level

use Pewpew
use VithenConstants
use ScoreUtils

enum AttackState {
    NOTHING,
    SIMPLE_FOUR,
    ROTATION
}

const LASER_PREPARE_TIME = 90f
const PREPARATION_TIME = 106
const LASER_THICKNESS = 1.5f
const COLOR = 0xff6a00ff
let size = Fmath:ToFixed(SIZE)

pub entity Vithen {
    AttackState state = AttackState.NOTHING
    fixed time
    number prepTime = PREPARATION_TIME
    fixed x, y
    number hp = 25
    number hitReaction

    list<entity> laserIndicators

    fixed angle, accel, maxAccel 
    number difficulty
    fixed accelRate = 0.2f

    spawn(fixed x, y, number difficulty) {
        self.difficulty = difficulty
        self.x, self.y = x, y
        SetEntityMesh(self, VithenMesh, 0)
        SetEntityMeshColor(self, COLOR)
        SetEntityRadius(self, size/2f)
        SetEntityTag(self, Globals:BULLET_COLLIDABLE_TAG)

        repeat 4 with i {
            Table:Insert(laserIndicators, NewEntity(x, y))
        }
    }

    destroy() {
        for _, v in laserIndicators {
            DestroyEntity(v)
        }
        SetEntityMeshColor(self, COLOR)
        ExplodeEntity(self, 40)
        CreateExplosion(x, y, COLOR, 1.4f, 50)
        SetEntityUpdateCallback(self, fn(entity _) {})
        PlaySound(VithenSound, 1, x, y)

        IncreaseScore(x, y, LevelScore.Score100, PointoniumScore.Score64)
    }

    PlayerCollision(number _, entity ship) {
        DamageShip(ship, 2)
        destroy self()
    }

    WeaponCollision(number _, WeaponType weaponType) -> bool {
        if IsEntityBeingDestroyed(self) return false
        match weaponType {
            WeaponType.Bullet => {
                hp -= 1
                PlaySound(VithenSound, 0, x, y)
                if hp <= 0 {
                    destroy self()
                } else {
                    hitReaction = 2
                }
                IncreasePlayerScore(0, 5)
                return true
            }
            WeaponType.AtomizeExplosion => {
                destroy self()
            }
        } 
        return true
    }

    Update() {      
        if hitReaction >= 0 {
            SetEntityMeshColor(self, 0xffffffff)
        } else {
            SetEntityMeshColor(self, COLOR)
        }
        hitReaction -= 1 
        match state {
            AttackState.NOTHING => {
                if accelRate < 0f {
                    accel += accelRate / -4f
                    if accel > 0f {
                        accel = 0f
                    }
                } else if accelRate > 0f {
                    accel -= accelRate / 4f
                    if accel < 0f {
                        accel = 0f
                    }
                }
                angle += accel

                SetEntityMeshAngle(self, angle, 0f, 0f, 1f)
                prepTime -= 1
                if prepTime >= 0 break
                // if difficulty < 2 {
                //     state = AttackState.SIMPLE_FOUR
                //     time = 0f
                //     return
                // }
                let randomNum = Fmath:RandomNumber(0, 1)
                match randomNum {
                    0 => {
                        state = AttackState.ROTATION
                        let random = Fmath:RandomFixed(0.1d, 0.3d)
                        maxAccel = Fmath:RandomFixed(0.5d, 2.5d)
                        accelRate = match Fmath:RandomNumber(0, 1) {
                            0 => random
                            1 => -random
                            else => random
                        }
                    }
                    else => {
                        state = AttackState.SIMPLE_FOUR
                    }
                }
                time = 0f
            }
            AttackState.SIMPLE_FOUR => {
                for i, v in laserIndicators {
                    let ang = angle+90d*(Fmath:ToFixed(i)-1f)
                    let sin, cos = Fmath:Sincos(ang)
                    SetEntityPosition(v, x+cos*size/2f, y+sin*size/2f)
                    SetEntityMeshAngle(v, ang, 0f, 0f, 1f)
                    let t = FmathHelpers:InvLerp(0f, LASER_PREPARE_TIME, time)
                    t = t*t
                    SetEntityMeshXYZScale(v, 1f, FmathHelpers:Lerp(0f, 1f, t)*LASER_THICKNESS, 1f)
                    SetEntityMeshColor(v, (0xffffff*256+Fmath:ToNumber(t*100f)/100*255)\1)
                    SetEntityMesh(v, VithenLaserMesh, 1)
                }

                if time >= LASER_PREPARE_TIME {
                    repeat 4 with i {
                        let lx, ly = GetEntityPosition(laserIndicators[i])
                        let ang = angle+90d*(Fmath:ToFixed(i)-1f)
                        spawn Laser:Laser(lx, ly, ang, 0xffff00ff, LASER_THICKNESS)
                    }
                    time = 0f
                    state = AttackState.NOTHING
                    prepTime = PREPARATION_TIME
                    for i, v in laserIndicators {
                        SetEntityMesh(v, VithenLaserMesh, 0)
                    }
                    break
                }

                time += 1f
            }
            AttackState.ROTATION => {
                accel += accelRate
                if accel > maxAccel {
                    accel = maxAccel
                } else if accel < -maxAccel {
                    accel = -maxAccel
                }
                angle += accel

                SetEntityMeshAngle(self, angle, 0f, 0f, 1f)

                for i, v in laserIndicators {
                    let ang = angle+90d*(Fmath:ToFixed(i)-1f)
                    let sin, cos = Fmath:Sincos(ang)
                    SetEntityPosition(v, x+cos*size/2f, y+sin*size/2f)
                    SetEntityMeshAngle(v, ang, 0f, 0f, 1f)
                    let t = FmathHelpers:InvLerp(0f, LASER_PREPARE_TIME, time)
                    t = t*t
                    SetEntityMeshXYZScale(v, 1f, FmathHelpers:Lerp(0f, 1f, t)*LASER_THICKNESS, 1f)
                    SetEntityMeshColor(v, (0xffffff*256+Fmath:ToNumber(t*100f)/100*255)\1)
                    SetEntityMesh(v, VithenLaserMesh, 1)
                }

                if time >= LASER_PREPARE_TIME {
                    repeat 4 with i {
                        let lx, ly = GetEntityPosition(laserIndicators[i])
                        let ang = angle+90d*(Fmath:ToFixed(i)-1f)
                        spawn Laser:Laser(lx, ly, ang, 0xffff00ff, LASER_THICKNESS)
                    }
                    time = 0f
                    state = AttackState.NOTHING
                    prepTime = Fmath:RandomNumber(PREPARATION_TIME, PREPARATION_TIME+10)
                    for _, v in laserIndicators {
                        SetEntityMesh(v, VithenLaserMesh, 0)
                    }
                    break
                }

                time += 1f
            }
        }
    }
}