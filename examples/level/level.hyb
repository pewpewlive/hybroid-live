env Main as Level

use Pewpew
use ShipEntity
use SuperInertiacEntity
use Globals
use Pylon
use HypercubeEntity
use VithenEntity

SetLevelSize(WIDTH, HEIGHT)

let bg = NewEntity(WIDTH/2f, HEIGHT/2f)
SetEntityMesh(bg, MapMesh, 1)
SetEntityTag(bg, DONT_DESTROY)

let grid = new Grid:Grid(CELLCOUNT, CELLCOUNT, CELLSIZE_X, CELLSIZE_Y, 0f, 0f, 0f)
grid.CreateLineGrid()

let roundManager = new RoundManager:RoundManager()

tick with time {
  if GetPlayerConfig(0).has_lost {
    StopGame()
  }

  roundManager.Update()

  // Bullet grid pulse
  let entities = GetAllEntities()
  for _, e in entities {
    let entityType = GetEntityType(e)
    
    match entityType {
      EntityType.CustomizableEntity, EntityType.Ship, EntityType.MothershipBullet => continue
      else => {
        let ex, ey = GetEntityPosition(e)
        grid.Pulse(ex, ey, 15f, 70f)
      }
    }
  }
  // Custom enemy grid pulse
  for inertiac in every SuperInertiac {
    let ex, ey = GetEntityPosition(inertiac)
    grid.Pulse(ex, ey, -25f, 60f)
  }
  for bullet in every BulletEntity:Bullet {
    let ex, ey = GetEntityPosition(bullet)
    grid.Pulse(ex, ey, -25f, 60f)
  }
  for wormhole in every WormholeEntity:Wormhole {
    let ex, ey = GetEntityPosition(wormhole)
    let pullRadius = wormhole.currentPullRadius
    grid.Pulse(ex, ey, -Fmath:RandomFixed(90f, 100f), Fmath:RandomFixed(pullRadius, pullRadius + 20f))
  }
  for wormholeDeath in every WormholeEntity:WormholeDeath {
    let ex, ey = GetEntityPosition(wormholeDeath)
    grid.Pulse(ex, ey, -wormholeDeath.power, wormholeDeath.radius*1.25f)
  }
  for particle in every Shockwave:Particle {
    let ex, ey = GetEntityPosition(particle)
    grid.Pulse(ex, ey, particle.power, particle.radius)
  }
  for hypercube in every Hypercube {
    if IsEntityBeingDestroyed(hypercube) continue
    let ex, ey = GetEntityPosition(hypercube)
    let mod = hypercube.Sum()/HypercubeEntity:FAST_ENOUGH*1.5f
    grid.Pulse(ex, ey, -30f*mod, hypercube.radius*mod)
  }
  // Player ship grid pulse
  if IsEntityAlive(SHIP.id) {
    let px, py = GetEntityPosition(SHIP.id)
    grid.Pulse(px, py, 30f, 250f)
  }
}