env Main as Level

use Pewpew
use ShipEntity
use SuperInertiacEntity
use Globals
use Pylon
use HypercubeEntity

SetLevelSize(WIDTH, HEIGHT)

let playerConfig = struct{
  shield = 5, camera_distance = -150f
}
ConfigurePlayer(0, playerConfig)

let bg = NewEntity(WIDTH/2f, HEIGHT/2f)
SetEntityMesh(bg, MapMesh, 1)
//spawn SuperInertiac(500f, 0f)
//spawn Pylon(100f, 100f)
//spawn WormholeEntity:Wormhole(WIDTH/2f, HEIGHT/2f, 40f)
spawn Hypercube(400f, 500f, Fmath:RandomFixed(0d, 360d))

//AddWall(750f, 250f, 500f, 500f)

let grid = new Grid:Grid(CELLCOUNT+1, CELLCOUNT+1, CELLSIZE, 0f, 0f, 0f)
grid.CreateLineGrid()

tick with time {
  if GetPlayerConfig(0).has_lost == true {
    StopGame()
  }
  let entities = GetAllEntities()
  for _, e in entities {
    let entityType = GetEntityType(e)
    if e == SHIP.id or (entityType == EntityType.CustomizableEntity and GetEntityTag(e) == Grid:ENTITY_TAG) {
      continue
    }
    let ex, ey = GetEntityPosition(e)
    match entityType {
      EntityType.CustomizableEntity => {
        match GetEntityTag(e) {
          NORMAL_PULL => grid.Pulse(ex, ey, -25f, 60f)
          WORMHOLE_PULL => {
            if let wormhole = e is WormholeEntity:Wormhole {
              grid.Pulse(ex, ey, -Fmath:RandomFixed(90f, 100f), Fmath:RandomFixed(wormhole.currentPullRadius, wormhole.currentPullRadius+20f))
            }
          }
        }
      }
      EntityType.PlayerBullet => {
        grid.Pulse(ex, ey, 15f, 70f)
      }
    }
  }
  if IsEntityAlive(SHIP.id) {
    let px, py = GetEntityPosition(SHIP.id)
    grid.Pulse(px, py, 30f, 250f)
  }
  if time % 30 == 0 {
    //Print(ToString(playerConfig))
    //NewAsteroid(WIDTH/2f, HEIGHT/2f)
  }
}