env Graphix as Shared

use Table

pub fn NewMesh() -> Mesh {
  return struct{
    vertexes = list<list<number>>[],
    segments = list<list<number>>[],
    colors = list<number>[],
  }
}

pub fn Scale(Mesh mesh, number modifier) {
  for _, v in mesh.vertexes {
    for i in v {
      v[i] *= modifier
    }
  }
}

pub fn ScaleAxis(Mesh mesh, Vertex mods) {
  for _, v in mesh.vertexes {
    for i in v {
      if #mods < i {
        continue
      }
      v[i] *= mods[i]
    }
  }
}

pub fn AddLine(Mesh mesh, Vertexes vertexes, Colors colors, bool closeLoop) {
  let vertexCount = #mesh.vertexes

  let numberOfNewSegments = #vertexes - 1
  Segment segment
  
  repeat with i to #vertexes {
    Insert(mesh.vertexes, vertexes[i])
    Insert(mesh.colors, colors[i])
  }

  Insert(segment, vertexCount)
  repeat with i to numberOfNewSegments {
    Insert(segment, vertexCount + i)
  }

  if closeLoop {
    Insert(segment, vertexCount)
  }
  Insert(mesh.segments, segment)
}

pub fn AddSquare(Mesh mesh, Center center, number color, size) {
  let x, y, z = center.x, center.y, center.z
  let vertexes = [[x-size/2, y-size/2, z], [x+size/2, y-size/2, z], [x+size/2, y+size/2, z], [x-size/2, y+size/2, z]]
  let colors = [color,color,color,color]
  AddLine(mesh, vertexes, colors, true)
}

pub fn AddThickLine(Mesh mesh, number colorStart, number colorEnd, thickness, length) {
  AddLine(mesh, [[0,0], [length,0]], [colorStart, colorEnd], false)

  repeat from 1 to thickness-1 with i {
    AddLine(mesh, [[0,i], [length,i]], [colorStart, colorEnd], false)
    AddLine(mesh, [[0,-i], [length,-i]], [colorStart, colorEnd], false)
  }
}

pub fn AddSphere(Mesh mesh, Vertex center, number color, radius) {
  let x, y, z = center[1], center[2], center[3]
  let divisions = 8
  let segments = 16

  repeat from 0 to divisions with t {
    let circleRadius = Math:Sin(Math:Pi * (t/divisions)) * radius
    let circleZ = z + Math:Cos(Math:Pi * (t/divisions)) * radius
    Vertexes vertexes
    Colors colors
    repeat segments - 1 with i {
      let angle = (i * Math:Pi * 2) / segments 
      Table:Insert(vertexes, [x + Math:Cos(angle) * circleRadius, y + Math:Sin(angle) * circleRadius, circleZ])
      Table:Insert(colors, color)
    }
    AddLine(mesh, vertexes, colors, true)
  }
}

pub fn AddFlatPoly(Mesh mesh, Vertex center, number sides, color, radius, startAngle) {
  if sides <= 2
    return

  Vertexes vertexes 
  Colors colors

  number z
  if #center >= 3 {
    z = center[3]
  }

  repeat sides with i {
    let angle = (Math:Pi * 2 * i) / sides + startAngle
    Insert(vertexes, [center[1] + radius * Math:Cos(angle), center[2] + radius * Math:Sin(angle), z])
    Insert(colors, color)
  }

  AddLine(mesh, vertexes, colors, true)
}

pub fn AddStar(Mesh mesh, Vertex center, number sides, color, insetColor, radius, insetRadius, startAngle) {
  if sides <= 2
    return

  sides *= 2

  Vertexes vertexes 
  Colors colors

  number x = center[1]
  number y = center[2]
  number z
  if #center >= 3 {
    z = center[3]
  }

  number currentRadius
  number currentColor

  repeat sides with i {
    if i % 2 == 0 {
      currentRadius = insetRadius
      currentColor = insetColor
    }
    else {
      currentRadius = radius
      currentColor = color
    } 

    let angle = (Math:Pi * 2 * i) / sides + startAngle
    Insert(vertexes, [x + currentRadius * Math:Cos(angle), y + currentRadius * Math:Sin(angle), z])
    Insert(colors, currentColor)
  }

  AddLine(mesh, vertexes, colors, true)
}

pub fn AddCube(Mesh mesh, Vertex center, number sideLength, color) {
  let half = sideLength / 2
  let x = center[1]
  let y = center[2]
  let z = center[3]

  let a = [x - half, y - half, z - half]
  let b = [x - half, y + half, z - half]
  let c = [x + half, y + half, z - half]
  let d = [x + half, y - half, z - half]
  let e = [x - half, y - half, z + half]
  let f = [x - half, y + half, z + half]
  let g = [x + half, y + half, z + half]
  let h = [x + half, y - half, z + half]

  AddLine(mesh, [a, b, c, d], [color, color, color, color], true)
  AddLine(mesh, [e, f, g, h], [color, color, color, color], true)

  AddLine(mesh, [a, e], [color, color], false)
  AddLine(mesh, [b, f], [color, color], false)
  AddLine(mesh, [c, g], [color, color], false)
  AddLine(mesh, [d, h], [color, color], false)
}

fn JumpToHorizontal(number index, cellCount) -> number {
  return (index+(cellCount)^2)\1
}

pub fn AddGridMap(Mesh mesh, number color1, color2, size, cellCount, zMin, zMax) {
  let inc = size\cellCount

  repeat from -size\2 to size\2 by inc with i {
    repeat from -size\2 to size\2 by inc with j {
      let z = Math:Random(zMin, zMax)
      Table:Insert(mesh.colors, ColorHelpers:LerpColors2(color1, color2, MathHelpers:Remap(0, 1, zMin, zMax, z)))
      Table:Insert(mesh.vertexes, [i, j, z])
      if j != -size\2 and Math:Random(0,1) == 1 {
        Table:Insert(mesh.segments, [#mesh.vertexes-2, #mesh.vertexes-1])
      }
    }
  }
  repeat #mesh.vertexes-cellCount-1 with i {
    if Math:Random(0,1) == 1 {
    Table:Insert(mesh.segments, [i-1, i+cellCount])
    }
  }
}

