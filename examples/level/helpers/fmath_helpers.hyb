env FmathHelpers as Level 

use Fmath

pub fn Length(fixed x, y) -> fixed
  => Sqrt(x * x + y * y)

pub fn Normalize(fixed x, y) -> (fixed, fixed) {
  if x == 0f and y == 0f {
    return 0f, 0f
  }

  let len = Length(x, y)

  if len == 0f {
    return 0f, 0f
  }

  return x / len, y / len
}

pub fn Clamp(fixed val, min, max) -> fixed {
  if val > max {
    return max
  }
  if val < min {
    return min
  }

  return val
}

pub fn Lerp(fixed a, b, t) -> fixed 
  => a + (b - a) * t

pub fn InvLerp(fixed a, b, v) -> fixed 
  => (v-a)/(b-a)

pub fn Remap(fixed a, b, c, d, v) -> fixed {
    let t = InvLerp(c, d, v)
    return Lerp(a, b, t)
}

pub fn Dot(fixed x, y, nX, nY) -> fixed
  => x * nX + y * nY

pub fn Reflect(fixed x, y, nX, nY) -> (fixed, fixed) {
  fixed dot = Dot(x, y, nX, nY) * 2f
  x -= nX * dot
  y -= nY * dot
  return x, y 
}
