env Gameplay as Level

use Pewpew
use Fmath
use Globals
use ShipEntity

pub alias EntitySpawn = fn(number, number)

fn Rangle() -> fixed {
  return RandomFixed(0d, 360d)
}

const SAFE_AREA = 50f

pub fn PlayerSafeSpawn(fn() -> (fixed, fixed) f) -> (fixed, fixed) {
    let x, y = f()
    let px, py = GetEntityPosition(SHIP.id)
    let counter = 0
    while AbsFixed(x - px) < SAFE_AREA and AbsFixed(y - py) < SAFE_AREA {
        counter += 1
        x, y = f()
        if counter > 16 {
            return x, y
        }
    } 
    return x, y
}

pub fn RandomWallSpawn(fixed offset) -> (fixed, fixed) {
    let r = Fmath:RandomNumber(0,1)
    return match r {
        0 => 0f, Fmath:RandomFixed(offset, HEIGHT-offset)
        else => Fmath:RandomFixed(offset, WIDTH-offset), 0f
    }
}

pub fn RandomSpawn() -> (fixed, fixed) {
    return RandomFixed(100f, WIDTH - 100f), RandomFixed(100f, HEIGHT - 100f)
}

pub fn RandomSpawnGridSafe() -> (fixed, fixed) {
    let cellX = ToFixed(RandomNumber(2, CELLCOUNT-2))
    let cellY = Fmath:ToFixed(RandomNumber(2, CELLCOUNT-2))

    let x, y = cellX*CELLSIZE_X+CELLSIZE_X/2f, cellY*CELLSIZE_Y+CELLSIZE_Y/2f

    let counter = 0
    while #GetEntitiesInRadius(x, y, 1f) > 0 {
        counter += 1
        let cellX = ToFixed(RandomNumber(2, CELLCOUNT-2))
        let cellY = Fmath:ToFixed(RandomNumber(2, CELLCOUNT-2))

        x, y = cellX*CELLSIZE_X+CELLSIZE_X/2f, cellY*CELLSIZE_Y+CELLSIZE_Y/2f
        if counter > 16 {
            return x, y
        }
    }

    return x, y
}

pub Ambushes = [
    fn(number diff) {
        let x, y = PlayerSafeSpawn(RandomSpawn)
        repeat 5 {
            let mag = Fmath:RandomFixed(8f, 100f)
            let my, mx = Fmath:Sincos(Rangle())
            NewSuperMothership(x+mx*mag, y+my*mag, MothershipType.Pentagon, Rangle())
        }
    },
    fn(number diff) {
        const BAF_SPEED = 12fx
        let totalPositions = 14fx

        let amountPerBatch = 2
        let spaceAfterBatch = 2

        let xStep = WIDTH/2fx/totalPositions
        let yStep = HEIGHT/2fx/totalPositions

        let counter = 0
        let mode = true // true for checking amountPerBatch, false for checking spaceAfterBatch
        repeat from 0f to totalPositions with i {
            counter += 1
            if !mode {
                if counter < spaceAfterBatch {
                    continue
                }
                if counter >= spaceAfterBatch {
                    mode = true
                    counter = 0
                    continue
                }
            }else {
                if counter == amountPerBatch and mode {
                    mode = false
                    counter = 0
                }
            }
            let leftBottomX, leftBottomY = xStep*i, yStep*i
            NewRedBAF(leftBottomX, leftBottomY, 90d, BAF_SPEED, 250)
            NewRedBAF(leftBottomX, leftBottomY, 270d, BAF_SPEED, 250)

            NewRedBAF(WIDTH-leftBottomX, leftBottomY, 90d, BAF_SPEED, 250)
            NewRedBAF(WIDTH-leftBottomX, leftBottomY, 270d, BAF_SPEED, 250)

            NewRedBAF(leftBottomX, HEIGHT-leftBottomY, 90d, BAF_SPEED, 250)
            NewRedBAF(leftBottomX, HEIGHT-leftBottomY, 270d, BAF_SPEED, 250)

            NewRedBAF(WIDTH-leftBottomX, HEIGHT-leftBottomY, 90d, BAF_SPEED, 250)
            NewRedBAF(WIDTH-leftBottomX, HEIGHT-leftBottomY, 270d, BAF_SPEED, 250)
        }
    }
]

pub RoundOne = [
    fn(number time, diff) {
        if time == 2 or time % 350 == 0 {
            let x, y = PlayerSafeSpawn(RandomSpawn)
            repeat 3+diff {
                NewMothership(x, y, MothershipType.Triangle, Rangle())
            }
        }
    },
    fn(number time, diff) {
        if time == 2 {
            let x, y = PlayerSafeSpawn(RandomSpawnGridSafe)
            spawn Pylon:Pylon(x, y)
        }
        if time % 440 == 0 {
            repeat diff-1 {
                let x, y = PlayerSafeSpawn(RandomSpawnGridSafe)
                spawn Pylon:Pylon(x, y)
            }
        }
    },
    fn(number time, diff) {
        if time == 2 {
            repeat 6+diff {
                let x, y = PlayerSafeSpawn(RandomSpawn)
                NewRollingCube(x, y)
            }
        }
        if time % 200 == 0 {
            repeat 4+diff {
                let x, y = PlayerSafeSpawn(RandomSpawn)
                NewRollingCube(x, y)
            }
        }
    },
    fn(number time, diff) {
        if diff > 2 {
            return
        }

        if time == 40 or time % 330 == 0 {
            let x, y = PlayerSafeSpawn(RandomSpawn)
            NewAsteroid(x, y)
        }
    },
    fn(number time, diff) {
        if diff <= 2 {
            return
        }

        if time == 170 {
            let x, y = PlayerSafeSpawn(RandomSpawn)
            NewBonus(x, y, BonusType.Weapon, struct{
                box_duration = 300, 
                cannon = CannonType.Hemisphere,
                weapon_duration = 160,
                frequency = CannonFreq.Freq5
            })
        }
    }
]

pub RoundTwo = [
    fn(number time, diff) {
        if time == 2 or time % 440 == 0 {
            repeat 1+diff {
                let x, y = PlayerSafeSpawn(RandomSpawn)
                spawn HypercubeEntity:Hypercube(x, y)
            }
        }
    },
    fn(number time, _) {
        if time == 2 or time % 300 == 0 {
            let x, y = PlayerSafeSpawn(RandomSpawn)
            NewInertiac(x, y, 1.5f, Rangle())
        }
    },
    fn(number time, _) {
        if time == 100 or (time-100) % 400 == 0 {
            let dy, dx = Fmath:Sincos(Rangle())
            dx, dy *= 20f, 20f
            let x, y = PlayerSafeSpawn(RandomSpawn)
            let id = NewUFO(x+dx, y+dy, 3f)
            let id2 = NewUFO(x-dx, y-dy, 3f)
            SetUFOWallCollision(id, true)
            SetUFOWallCollision(id2, true)
        }
    },
    fn(number time, diff) {
        let bafAmount = ToFixed(diff)+2fx
        const BAF_SPEED = 10f
        
        if time % 170 == 0 {
            let x, y = RandomWallSpawn(bafAmount*BAF_SIZE)
            fixed my, mx, py, px
            fixed direction = 0d
            if x == 0f or x == WIDTH {
                my, mx, py, px = Sincos(90d), Sincos(270d)
            }else {
                my, mx, py, px = Sincos(0d), Sincos(180d)
            }
            if x == 0f {
                direction = 0d
            }else if x == WIDTH {
                direction = 180d
            }else if y == 0f {
                direction = 90d
            }else {
                direction = 270d
            }
            NewBlueBAF(x, y, direction, BAF_SPEED, 900)
            repeat from 1fx to bafAmount with i {
                NewBlueBAF(x+mx*BAF_SIZE*i, y+my*BAF_SIZE*i, direction, BAF_SPEED, 900)
                NewBlueBAF(x+px*BAF_SIZE*i, y+py*BAF_SIZE*i, direction, BAF_SPEED, 900)
            }
        }
    },

    fn (number time, diff) {
        if time == 180 {
            let x, y = PlayerSafeSpawn(RandomSpawn)
            NewBonus(x, y, BonusType.Weapon, struct{
                box_duration = 300, 
                cannon = CannonType.DoubleSwipe,
                frequency = CannonFreq.Freq30,
                weapon_duration = 160,
            })
        }
    }
]

pub RoundThree = [
    fn(number time, diff) {
        if time == 2 or time % 600 == 0 {
            let x, y = PlayerSafeSpawn(RandomSpawn)
            spawn SuperInertiacEntity:SuperInertiac(x, y)
        }
    },
    fn(number time, diff) {
        if time == 2 or time % 300 == 0 {
            let bafAmount = 14+diff
            let angleStep = 360d / ToFixed(bafAmount)
            let x, y = PlayerSafeSpawn(RandomSpawn)
            repeat bafAmount with i {
                let angle = angleStep * ToFixed(i)
                let dy, dx = Sincos(angle)
                NewYellowBAF(x + dx * 80f, y + dy * 80f, angle, 10f, 500)
            }
        }
    },
    fn(number time, diff) {
        if time == 100 or time % 450 == 0 {
            let x, y = PlayerSafeSpawn(RandomSpawn)
            let crowderAmount = Fmath:ToFixed(7+diff)
            let r = 13f*crowderAmount
            repeat crowderAmount {
                let dy, dx = Sincos(Fmath:RandomFixed(0d, 360d))
                NewCrowder(x + dx * r, y + dy * r)
                r *= 0.8f
            }
        }
    }
]

pub RoundFour = [
    fn(number time, diff) {
        if time == 2 {
            repeat 3+diff {
                let x, y = PlayerSafeSpawn(RandomSpawnGridSafe)
                spawn VithenEntity:Vithen(x, y, diff)
            }
        } else if time % 400 == 0 {
            repeat 1+diff {
                let x, y = PlayerSafeSpawn(RandomSpawnGridSafe)
                spawn VithenEntity:Vithen(x, y, diff)
            }
        }
    },
    fn(number time, diff) {
        if time == 2 or time % 600 == 0 {
            let x, y = PlayerSafeSpawn(RandomSpawn)
            spawn WormholeEntity:Wormhole(x, y, 50f)
        }
    },
    fn(number time, diff) {
        if time % 200 == 0 {
            repeat 1+diff {
                let x, y = PlayerSafeSpawn(RandomSpawn)
                NewMothership(x, y, MothershipType.Pentagon, Rangle())
            }
        }
    },
    fn (number time, _) {
        if time == 280 {
            let x, y = PlayerSafeSpawn(RandomSpawn)
            NewBonus(x, y, BonusType.Weapon, struct{
                box_duration = 300, 
                cannon = CannonType.Laser,
                weapon_duration = 160,
                frequency = CannonFreq.Freq3
            })
        }
    }
]