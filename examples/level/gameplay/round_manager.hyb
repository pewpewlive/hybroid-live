env RoundManager as Level

use VithenEntity
use Globals
use Pewpew
use Gameplay
use ShipEntity

enum Round {
    One,
    Two,
    Three,
    Four,
    Boss,
    Hypercube
}

enum RoundVariant {
    Normal,
    Fast
}

const ROUND_DURATION = 1000
const ROUND_PAUSE = 100

fn Chance(number percent) -> bool {
    let a = Fmath:RandomNumber(0, 100)
    return a <= percent 
}

pub class RoundManager {
    Round round = Round.One
    RoundVariant variant = RoundVariant.Normal
    Round nextRoundAfterSpecial = Round.One
    number time, bossTime
    number diff = 2
    number progression = 1
    bool pause 
    number randomAmbushTime = -1

    new() {
       NewAmbushTime()
    }

    fn ProgressRound() {
        if progression % 2 == 0 {
            repeat 2 {
                let x, y = PlayerSafeSpawn(RandomSpawn)
                NewBonus(x, y, BonusType.Shield, struct{
                    box_duration = 400,
                    number_of_shields = 1
                })
            }
        }
        progression += 1
        if progression % 4 == 0 {
            diff += 1
        }
        time = 0
        pause = true
        NewAmbushTime()
    }

    fn NewAmbushTime() {
        if Chance(100) {
            randomAmbushTime = Fmath:RandomNumber(ROUND_DURATION/2, ROUND_DURATION-1)
        }else {
            randomAmbushTime = -1
        }
    }

    fn AmbushCheck() {
        if time == randomAmbushTime\2 {
            let x, y = PlayerSafeSpawn(RandomSpawn)
            NewBonus(x, y, BonusType.Weapon, struct{
                box_duration = randomAmbushTime\2+30, 
                cannon = CannonType.Double,
                frequency = CannonFreq.Freq30,
                weapon_duration = 160,
            })
        } else if time == randomAmbushTime {
            let n = Fmath:RandomNumber(1, #Ambushes)
            Ambushes[n](diff)
        }
    }

    fn Update() {
        if !IsEntityAlive(ShipEntity:SHIP.id) {
            return
        }

        if pause {
            time += 1
            if time >= ROUND_PAUSE {
                pause = false
                time = 0
            }
            return
        }

        match round {
            Round.One => {
                time += 1
                for _, enemySpawn in RoundOne {
                    enemySpawn(time, diff)
                }
                
                if time >= ROUND_DURATION {
                    round = Round.Two
                    RandomizeVariant()
                    ProgressRound()
                }
            }
            Round.Two => {
                time += 1
                for _, enemySpawn in RoundTwo {
                    enemySpawn(time, diff)
                }

                AmbushCheck()

                // if time == ROUND_DURATION\2 and Chance(20) {
                //     round = Round.Boss
                //     break
                // }
                if time >= ROUND_DURATION {
                    round = Round.Three
                    RandomizeVariant()
                    ProgressRound()
                }
            }
            Round.Three => {
                time += 1
                for _, enemySpawn in RoundThree {
                    enemySpawn(time, diff)
                }
                if time >= ROUND_DURATION {
                    round = Round.Four
                    RandomizeVariant()
                    ProgressRound()
                }
            }
            Round.Four => {
                time += 1
                for _, enemySpawn in RoundFour {
                    enemySpawn(time, diff)
                }
                
                AmbushCheck()

                if time >= ROUND_DURATION {
                    round = Round.One
                    RandomizeVariant()
                    ProgressRound()
                }
            }
            Round.Hypercube => {
                time += 1
                if time == 2 {
                    repeat 12 {
                        let x, y = PlayerSafeSpawn(RandomSpawn)
                        spawn HypercubeEntity:Hypercube(x, y)
                    }
                }
                if time % 450 == 0 {
                    let x, y = PlayerSafeSpawn(RandomSpawn)
                    spawn HypercubeEntity:Hypercube(x, y)
                }
                if time >= ROUND_DURATION*1.5\1 {
                    round = nextRoundAfterSpecial
                    time = 0
                    RandomizeVariant()
                    ProgressRound()
                }
            }
        }
    }

    fn RandomizeVariant() {
        if Chance(30) {
            variant = RoundVariant.Fast
        } else {
            variant = RoundVariant.Normal
        }
    }
}