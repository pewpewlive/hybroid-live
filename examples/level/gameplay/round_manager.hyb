env RoundManager as Level

use VithenEntity
use Globals
use Pewpew
use Gameplay

enum Round {
    One,
    Two,
    Three,
    Four,
    Boss,
    Special
}

enum RoundVariant {
    Normal,
    Fast
}

const ROUND_DURATION = 1000
const ROUND_PAUSE = 90

fn Chance(number percent) -> bool {
    let a = Fmath:RandomNumber(0, 100)
    return a <= percent 
}

pub class RoundManager {
    Round round = Round.One
    RoundVariant variant = RoundVariant.Normal
    Round prevRound = Round.One
    number time, bossTime
    number diff = 1
    number progression = 1
    bool pause 

    new() {}

    fn ProgressRound() {
        progression += 1
        if progression % 4 == 0 {
            diff += 1
        }
        time = 0
        pause = true
    }

    fn Update() {
        if !IsEntityAlive(ShipEntity:SHIP.id) {
            return
        }

        if pause {
            time += 1
            if time >= ROUND_PAUSE {
                pause = false
                time = 0
            }
            return
        }

        match round {
            Round.One => {
                time += 1
                for _, enemySpawn in RoundOne {
                    enemySpawn(time, diff)
                }
                
                if time >= ROUND_DURATION {
                    round = Round.Two
                    RandomizeVariant()
                    prevRound = Round.One
                    ProgressRound()
                }
            }
            Round.Two => {
                time += 1
                for _, enemySpawn in RoundTwo {
                    enemySpawn(time, diff)
                }
                // if time == ROUND_DURATION\2 and Chance(20) {
                //     prevRound = round
                //     round = Round.Boss
                //     break
                // }
                if time >= ROUND_DURATION {
                    round = Round.Three
                    RandomizeVariant()
                    prevRound = Round.Two  
                    ProgressRound()
                }
            }
            Round.Three => {
                time += 1
                for _, enemySpawn in RoundThree {
                    enemySpawn(time, diff)
                }
                // if time == ROUND_DURATION\2 and Chance(20) {
                //     prevRound = round
                //     round = Round.Boss
                //     break
                // }
                if time >= ROUND_DURATION {
                    round = Round.Four
                    RandomizeVariant()
                    prevRound = Round.Three
                    ProgressRound()
                }
            }
            Round.Four => {
                time += 1
                for _, enemySpawn in RoundFour {
                    enemySpawn(time, diff)
                }
                if time >= ROUND_DURATION {
                    round = Round.One
                    RandomizeVariant()
                    prevRound = Round.Four
                    ProgressRound()
                }
            }
        }
    }

    fn RandomizeVariant() {
        if Chance(30) {
            variant = RoundVariant.Fast
        } else {
            variant = RoundVariant.Normal
        }
    }
}