env ShardEntity as Level

use Pewpew

const COLOR = 0x9058faff
const SHARD_HP_MAX = 5

pub entity Shard {
    fixed angle, speed, roll
    number hp = SHARD_HP_MAX
    number currentColor = COLOR
    fixed mx, my

    number immunityFrames = 12

    spawn(fixed x, y, angle, speed) {
        self.angle = angle
        self.speed = speed
        SetEntityMesh(self, ShardMesh, 0)
        SetEntityMeshXYZScale(self, 1f, 2f, 1f)
        my, mx = Fmath:Sincos(angle)
        SetEntityMeshPosition(self, mx * -2f, my * -2f, 0f)
        SetEntityPositionInterpolation(self, true)
        SetEntityMeshColor(self, COLOR)
        SetEntityMeshAngle(self, roll, 1f, 0f, 0f)
        AddRotationToEntityMesh(self, angle, 0f, 0f, 1f)
        SkipEntityMeshAttributesInterpolation(self)
        SpawnEntity(self, 0)
        SetEntityRadius(self, 10f)
    }

    destroy() {
        if immunityFrames >= 0 return
        if IsEntityBeingDestroyed(self) {
            return
        }
        let x, y = GetEntityPosition(self)
        CreateExplosion(x, y, COLOR, 0.75f, 14)
        PlaySound(ShardSound, 1, x, y)
        ExplodeEntity(self, 15)
    }

    Update() {
        immunityFrames -= 1
        if IsEntityBeingDestroyed(self) {
            return
        }
        roll += speed*1d
        currentColor = ColorHelpers:LerpColors(currentColor, COLOR, 0.4f)
        SetEntityMeshColor(self, currentColor)
        let x, y = GetEntityPosition(self)

        if IsEntityAlive(ShipEntity:SHIP.id) {
            let px, py = GetEntityPosition(ShipEntity:SHIP.id)
            let dpx, dpy = FmathHelpers:Normalize(px - x, py - y)
            dpx, dpy *= speed*0.9f, speed*0.9f
            mx, my = FmathHelpers:Lerp(mx, dpx, 0.01f), FmathHelpers:Lerp(my, dpy, 0.01f)
        }


        angle = Fmath:Atan2(my, mx)

        SetEntityPosition(self, x + mx * speed, y + my * speed)
        SetEntityMeshAngle(self, roll, 1f, 0f, 0f)
        AddRotationToEntityMesh(self, angle, 0f, 0f, 1f)

        let entities = GetEntitiesInRadius(x, y, 10f)
        for _, v in entities {
            if v is CustomizableEntity and GetEntityTag(v) == Globals:BULLET_COLLIDABLE_TAG {
                destroy self()
                break
            }
        }
    }

    WallCollision(fixed _, _) {
        if IsEntityBeingDestroyed(self) {
            return
        }
        destroy self()
    }

    PlayerCollision(number _, entity shipId) {
        if IsEntityBeingDestroyed(self) {
            return
        }
        DamageShip(shipId, 1)
        SetShipSpeed(shipId, 0.6f, 0f, 30)
        let x, y = GetEntityPosition(self)
        PlaySound(ShardSound, 0, x, y)
        destroy self()
    }

    WeaponCollision(number _, WeaponType weaponType) -> bool {
        if IsEntityBeingDestroyed(self) {
            return false
        }
        match weaponType {
            WeaponType.Bullet => {
                hp -= 1
                let x, y = GetEntityPosition(self)
                PlaySound(ShardSound, 0, x, y)
                currentColor = 0xffffffff
                if hp <= 0 {
                    destroy self()
                }
                return true
            }
        }
        return true
    }
}