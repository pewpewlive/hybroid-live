[
  {
    "name": "ForbiddenTypeInEnvironment",
    "type": "Error",
    "fields": {
      "Type": "string",
      "Envs": "[]string"
    },
    "message": "cannot have a %s in the following environments: %s",
    "message_format": ["Type", { "Envs": "strings.Join({}, \", \")" }]
  },
  {
    "name": "InvalidEnvironmentType",
    "type": "Error",
    "fields": {
      "Type": "string"
    },
    "message": "'%s' is not a valid environment type",
    "message_format": ["Type"],
    "note": "environment type can be 'Level', 'Mesh', 'Sound' or 'Shared'"
  },
  {
    "name": "EnvironmentRedaclaration",
    "type": "Error",
    "message": "cannot redeclare an environment"
  },
  {
    "name": "ExpectedEnvironment",
    "type": "Error",
    "message": "expected environment declaration",
    "note": "the first declaration in any Hybroid file has to be an environment declaration"
  },
  {
    "name": "DuplicateEnvironmentNames",
    "type": "Error",
    "fields": {
      "Path1": "string",
      "Path2": "string"
    },
    "message": "duplicate environment names found between '%s' and '%s'",
    "message_format": ["Path1", "Path2"]
  },
  {
    "name": "InvalidAccessValue",
    "type": "Error",
    "fields": {
      "Type": "string"
    },
    "message": "value is of type '%s', so it cannot be accessed from",
    "message_format": ["Type"],
    "note": "only lists, maps, classes, entities, structs and enums can be used to access values from"
  },
  {
    "name": "FieldAccessOnListOrMap",
    "type": "Error",
    "fields": {
      "Field": "string",
      "AccessType": "string"
    },
    "message": "cannot access field '%s' from the %s",
    "message_format": ["Field", "AccessType"],
    "note": "to access a value from a %s you use brackets, e.g. example[\\\"%s\\\"]",
    "note_format": ["AccessType", "Field"]
  },
  {
    "name": "MemberAccessOnNonListOrMap",
    "type": "Error",
    "fields": {
      "Member": "string",
      "AccessType": "string"
    },
    "message": "cannot access member '[%s]' from the %s",
    "message_format": ["Member", "AccessType"],
    "note": "to access a value you use a dot and then an identifier, e.g. example.identifier"
  },
  {
    "name": "InvalidMemberIndex",
    "type": "Error",
    "fields": {
      "AccessType": "string",
      "Index": "string"
    },
    "message": "'%s' is not of type number to be an index for the %s",
    "message_format": ["Index", "AccessType"],
    "note": "for lists, an index (number) is used to access values, for maps, a key (text) is used"
  },
  {
    "name": "InvalidField",
    "type": "Error",
    "fields": {
      "AccessType": "string",
      "FieldName": "string"
    },
    "message": "field '%s' does not belong to '%s'",
    "message_format": ["FieldName", "AccessType"]
  },
  {
    "name": "MixedMapOrListContents",
    "type": "Error",
    "fields": {
      "ContainerType": "string",
      "Type1": "string",
      "Type2": "string"
    },
    "message": "%s member is of type '%s', but the previous one was '%s'",
    "message_format": ["ContainerType", "Type1", "Type2"]
  },
  {
    "name": "InvalidCallerType",
    "type": "Error",
    "fields": {
      "Type": "string"
    },
    "message": "cannot call value of type '%s' as a function",
    "message_format": ["Type"]
  },
  {
    "name": "MethodOrFieldNotFound",
    "type": "Error",
    "fields": {
      "Name": "string"
    },
    "message": "no method or field named '%s'",
    "message_format": ["Name"]
  },
  {
    "name": "ForeignLocalVariableAccess",
    "type": "Error",
    "fields": {
      "Name": "string"
    },
    "message": "cannot access local variable '%s' belonging to a different environment",
    "message_format": ["Name"]
  },
  {
    "name": "InvalidArgumentType",
    "type": "Error",
    "fields": {
      "GivenType": "string",
      "ExpectedType": "string"
    },
    "message": "argument was of type %s, but should be %s",
    "message_format": ["GivenType", "ExpectedType"]
  },
  {
    "name": "PublicDeclarationInLocalScope",
    "type": "Error",
    "message": "cannot have a public declaration that is in a local scope"
  },
  {
    "name": "Redeclaration",
    "type": "Error",
    "fields": {
      "VarName": "string",
      "DeclType": "string"
    },
    "message": "a %s named '%s' already exists",
    "message_format": ["DeclType", "VarName"]
  },
  {
    "name": "NoValueGivenForConstant",
    "type": "Error",
    "message": "constant must be declared with a value"
  },
  {
    "name": "TooFewElementsGiven",
    "type": "Error",
    "fields": {
      "RequiredAmount": "int",
      "Elem": "string",
      "Context": "string"
    },
    "message": "%d more %s(s) required %s",
    "message_format": ["RequiredAmount", "Elem", "Context"]
  },
  {
    "name": "TooManyElementsGiven",
    "type": "Error",
    "fields": {
      "ExtraAmount": "int",
      "Elem": "string",
      "Context": "string"
    },
    "message": "%d less %s(s) required %s",
    "message_format": ["ExtraAmount", "Elem", "Context"]
  },
  {
    "name": "ExplicitTypeRequiredInDeclaration",
    "type": "Error",
    "fields": {
      "Context": "string"
    },
    "message": "an explicit type is required %s",
    "message_format": ["Context"]
  },
  {
    "name": "ExplicitTypeMismatch",
    "type": "Error",
    "fields": {
      "ExplicitType": "string",
      "ValueType": "string"
    },
    "message": "variable was given explicit type '%s', but its value is a '%s'",
    "message_format": ["ExplicitType", "ValueType"]
  },
  {
    "name": "ExplicitTypeNotAllowed",
    "type": "Error",
    "fields": {
      "ExplicitType": "string"
    },
    "message": "cannot create a default value from the explicit type '%s'",
    "message_format": ["ExplicitType"],
    "note": "some types don't have default values, like entities and classes"
  },
  {
    "name": "ImportCycle",
    "type": "Error",
    "fields": {
      "HybPaths": "[]string"
    },
    "message": "import cycle detected: %s",
    "message_format": [{ "HybPaths": "strings.Join({}, \" -> \")" }]
  },
  {
    "name": "UndeclaredVariableAccess",
    "type": "Error",
    "fields": {
      "Var": "string",
      "Context": "string"
    },
    "message": "'%s' is not a declared variable %s",
    "message_format": ["Var", "Context"]
  },
  {
    "name": "ConstValueAssignment",
    "type": "Error",
    "message": "cannot modify a constant value"
  },
  {
    "name": "AssignmentTypeMismatch",
    "type": "Error",
    "fields": {
      "VarType": "string",
      "ValType": "string"
    },
    "message": "variable is of type '%s', but a value of '%s' was assigned to it",
    "message_format": ["VarType", "ValType"]
  },
  {
    "name": "InvalidTypeInCompoundAssignment",
    "type": "Error",
    "fields": {
      "Type": "string"
    },
    "message": "the type '%s' is not allowed in compound assignment",
    "message_format": ["Type"],
    "note": "only numerical types are allowed, like number or fixed"
  },
  {
    "name": "InvalidUseOfSelf",
    "type": "Error",
    "message": "cannot use self outside of class or entity",
    "note": "you're also not allowed to use self inside anonymous functions of class/entity fields"
  },
  {
    "name": "UnreachableCode",
    "type": "Warning",
    "message": "unreachable code detected"
  },
  {
    "name": "InvalidUseOfExitStmt",
    "type": "Error",
    "fields": {
      "ExitNode": "string",
      "Context": "string"
    },
    "message": "cannot use '%s' outside of %s",
    "message_format": ["ExitNode", "Context"]
  },
  {
    "name": "TypeMismatch",
    "type": "Error",
    "fields": {
      "Type1": "string",
      "Type2": "string",
      "Context": "string"
    },
    "message": "expected %s, got '%s' %s",
    "message_format": ["Type1", "Type2", "Context"]
  },
  {
    "name": "InvalidStmtInLocalBlock",
    "type": "Error",
    "fields": {
      "StmtType": "string"
    },
    "message": "%s must be in the global scope",
    "message_format": ["StmtType"]
  },
  {
    "name": "UnallowedLibraryUse",
    "type": "Error",
    "fields": {
      "Library": "string",
      "UnallowedEnvs": "string"
    },
    "message": "cannot use the %s library in a %s environment",
    "message_format": ["Library", "UnallowedEnvs"]
  },
  {
    "name": "InvalidEnvironmentAccess",
    "type": "Error",
    "fields": {
      "EnvName": "string"
    },
    "message": "environment named '%s' does not exist",
    "message_format": ["EnvName"]
  },
  {
    "name": "EnvironmentReuse",
    "type": "Error",
    "fields": {
      "EnvName": "string"
    },
    "message": "environment named '%s' is already imported through use statement",
    "message_format": ["EnvName"]
  },
  {
    "name": "InvalidIteratorType",
    "type": "Error",
    "fields": {
      "Type": "string"
    },
    "message": "a for loop iterator must be a map or a list (found: '%s')",
    "message_format": ["Type"]
  },
  {
    "name": "UnnecessaryEmptyIdentifier",
    "type": "Warning",
    "fields": {
      "Context": "string"
    },
    "message": "unnecessary use of empty identifier ('_') %s",
    "message_format": ["Context"]
  },
  {
    "name": "EnvironmentUsesItself",
    "type": "Error",
    "message": "an environment cannot 'use' itself"
  },
  {
    "name": "EntityConversionWithOrCondition",
    "type": "Error",
    "message": "cannot convert an entity with an 'or' condition"
  },
  {
    "name": "InvalidCondition",
    "type": "Error",
    "fields": {
      "Context": "string"
    },
    "message": "invalid condition %s",
    "message_format": ["Context"],
    "note": "conditions always have to evaluate to either true or false"
  },
  {
    "name": "InvalidRepeatIterator",
    "type": "Error",
    "fields": {
      "Type": "string"
    },
    "message": "invalid repeat iterator of type '%s'",
    "message_format": ["Type"],
    "note": "repeat iterator must be a numerical type"
  },
  {
    "name": "InconsistentRepeatTypes",
    "type": "Error",
    "fields": {
      "From": "string",
      "Skip": "string",
      "Iterator": "string"
    },
    "message": "repeat types are inconsistent (from:'%s', by:'%s', to:'%s')",
    "message_format": ["From", "Skip", "Iterator"]
  },
  {
    "name": "OfficialEntityConversion",
    "type": "Error",
    "message": "conversion of an official entity to a hybroid entity is not possible"
  },
  {
    "name": "InvalidEnvironment",
    "type": "Error",
    "message": "there is no environment with that path"
  },
  {
    "name": "EnvironmentAccessAmbiguity",
    "type": "Error",
    "fields": {
      "Envs": "[]string",
      "Context": "string"
    },
    "message": "the type '%s' can be found on multiple environments: %s",
    "message_format": ["Context", { "Envs": "strings.Join({}, \", \")" }]
  },
  {
    "name": "NotAllCodePathsExit",
    "type": "Error",
    "fields": {
      "ExitType": "string"
    },
    "message": "not all code paths %s",
    "message_format": ["ExitType"]
  },
  {
    "name": "InsufficientCases",
    "type": "Error",
    "message": "match statement must have at least 1 non-default case"
  },
  {
    "name": "DefaultCaseMissing",
    "type": "Error",
    "message": "match expression must have a default case",
    "note": "default cases start with 'else'"
  },
  {
    "name": "InvalidCaseType",
    "type": "Error",
    "fields": {
      "MatchValueType": "string",
      "CaseValueType": "string"
    },
    "message": "match value is of type '%s', but case value is of type '%s'",
    "message_format": ["MatchValueType", "CaseValueType"]
  },
  {
    "name": "LiteralCondition",
    "type": "Warning",
    "fields": {
      "ConditionValue": "string"
    },
    "message": "condition is always %s",
    "message_format": ["ConditionValue"]
  },
  {
    "name": "TypesMismatch",
    "type": "Error",
    "fields": {
      "Value1": "string",
      "Type1": "string",
      "Value2": "string",
      "Type2": "string"
    },
    "message": "%s is of type '%s', but %s is of type '%s'",
    "message_format": ["Value1", "Type1", "Value2", "Type2"]
  },
  {
    "name": "MissingConstructor",
    "type": "Error",
    "fields": {
      "ConstructorType": "string",
      "Context": "string"
    },
    "message": "missing '%s' constructor %s",
    "message_format": ["ConstructorType", "Context"]
  },
  {
    "name": "MissingDestroy",
    "type": "Error",
    "message": "missing 'destroy' destructor in entity declaration"
  },
  {
    "name": "UninitializedFieldInConstructor",
    "type": "Error",
    "fields": {
      "VarName": "string",
      "Context": "string"
    },
    "message": "variable '%s' was not initialized in the constructor %s",
    "message_format": ["VarName", "Context"]
  },
  {
    "name": "TypeRedeclaration",
    "type": "Error",
    "fields": {
      "TypeName": "string"
    },
    "message": "type '%s' already exists",
    "message_format": ["TypeName"]
  },
  {
    "name": "InvalidCallAsArgument",
    "type": "Error",
    "message": "cannot have a call that returns more than 1 value as an argument"
  },
  {
    "name": "MoreThanOneVariadicParameter",
    "type": "Error",
    "message": "cannot have more than one variadic function parameter"
  },
  {
    "name": "VariadicParameterNotAtEnd",
    "type": "Error",
    "message": "variadic parameters must be at the end of the function parameters"
  },
  {
    "name": "DuplicateElement",
    "type": "Error",
    "fields": {
      "Element": "string",
      "ElemName": "string"
    },
    "message": "the %s '%s' already exists",
    "message_format": ["Element", "ElemName"]
  },
  {
    "name": "InvalidEntityFunctionSignature",
    "type": "Error",
    "fields": {
      "Got": "string",
      "Expected": "string",
      "EntityFuncType": "string"
    },
    "message": "expected '%s' for %s, got '%s'",
    "message_format": ["Expected", "EntityFuncType", "Got"]
  },
  {
    "name": "InvalidSpawnerParameters",
    "type": "Error",
    "message": "the first two parameters of the spawner must be fixedpoints"
  },
  {
    "name": "InvalidPewpewVariable",
    "type": "Error",
    "fields": {
      "PewpewVar": "string",
      "Type": "string"
    },
    "message": "'%s' variable should be global and of type 'list<%s>'",
    "message_format": ["PewpewVar", "Type"]
  },
  {
    "name": "MissingPewpewVariable",
    "type": "Error",
    "fields": {
      "PewpewVar": "string",
      "EnvType": "string"
    },
    "message": "A %s environment must have a '%s' variable",
    "message_format": ["EnvType", "PewpewVar"]
  },
  {
    "name": "UnallowedEnvironmentAccess",
    "type": "Error",
    "fields": {
      "Unallowed": "string",
      "From": "string"
    },
    "message": "cannot access a %s environment from a %s environment",
    "message_format": ["Unallowed", "From"]
  },
  {
    "name": "InvalidDefaultCasePlacement",
    "type": "Error",
    "fields": {
      "Context": "string"
    },
    "message": "the default case must always be at the end %s",
    "message_format": ["Context"]
  },
  {
    "name": "InvalidType",
    "type": "Error",
    "fields": {
      "Type": "string",
      "Context": "string"
    },
    "message": "cannot have a type '%s' %s",
    "message_format": ["Type", "Context"]
  },
  {
    "name": "ListIndexOutOfBounds",
    "type": "Error",
    "message": "list index is 0 or less, but it must be 1 or more"
  },
  {
    "name": "InvalidListIndex",
    "type": "Error",
    "message": "a list index must be a whole number"
  },
  {
    "name": "MissingGenericArgument",
    "type": "Error",
    "fields": {
      "Type": "string"
    },
    "message": "generic type '%s' could not be inferred",
    "message_format": ["Type"]
  },
  {
    "name": "InvalidAssignment",
    "type": "Error",
    "message": "left value was not a variable"
  },
  {
    "name": "ConflictingVariableNameWithType",
    "type": "Error",
    "fields": {
      "Type": "string"
    },
    "message": "variable name conflicts with type '%s'",
    "message_format": ["Type"]
  },
  {
    "name": "UnusedElement",
    "type": "Warning",
    "fields": {
      "Elem": "string"
    },
    "message": "%s is not used",
    "message_format": ["Elem"]
  },
  {
    "name": "EmptyIdentifierOnSpawnParameters",
    "type": "Error",
    "message": "cannot use an empty identifier ('_') for the first two spawn parameters"
  },
  {
    "name": "InvalidListOrMapWrappedType",
    "type": "Error",
    "message": "lists and maps have a singular wrapped type"
  },
  {
    "name": "AssignmentToSelf",
    "type": "Warning",
    "fields": {
      "VarName": "string"
    },
    "message": "the variable '%s' is assigned to itself",
    "message_format": ["VarName"]
  },
  {
    "name": "UnknownListOrMapContents",
    "type": "Error",
    "message": "lists or maps with no values need to have their wrapped type explicitly given",
    "note": "this can be done like so: let exampleList = [<number>] or let exampleMap = {<number>}"
  },
  {
    "name": "InvalidEntityForLoopType",
    "type": "Error",
    "message": "expected an entity type in the entity for loop"
  }
]
